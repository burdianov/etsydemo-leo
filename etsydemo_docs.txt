# create new project
-> rails new etsydemo

# generate PagesController with about and contact actions; and the respective routes
-> rails generate controller pages about contact

# create links
<%= link_to 'About', pages_about_path %>

# place the links (aka header) in views/layouts/application.html.erb file <%= yield %>

# place the copyright info (aka footer) in views/layouts/application.html.erb below <%= yield %>

# create product listing using scaffold
-> rails generate scaffold listing name:string description:text price:decimal

# migrate the generated migration
-> rake db:migrate

# after migrations, always restart the server
-> ctrl + c
-> rails s

# set the homepage inside config/routes.rb by adding:
root 'listings#index' # Listings Controller index action

############### install bootstrap-sass ##############

# navigate to https://github.com/twbs/bootstrap-sass for instructions
# inside Gemfile, add: gem 'bootstrap-sass', '~> 3.3.6'
# after modifying the Gemfile, update the gems
-> bundle install
# after bundle install, always restart the server
-> ctrl + c
-> rails s
# create a new file app/assets/stylesheets/custom.css.scss
# inside custom.css.scss add the folowing line:
@import 'bootstrap';
# inside app/assets/javascripts/application.js, just above the //= require turbolinks add the following line:
//= require bootstrap

############## end bootstrap-sass ##################


############## add bootstrap navigation bar ###############

# navigate to getbootstrap.com/components/#navbar
# copy the navbar code
# create a new partial views/layouts/_header.html.erb
# paste the navbar code inside the _header.html.erb
# render the header partial inside application.html.erb:
<%= render 'layouts/header' %>
# customize the navbar as required by project specs: 
# remove unnecessary links, search bar, class="active", navbar-right link
# replace the existing links in the navbar with the proper ones:
<li><%= link_to 'About', pages_about_path %></li>
<li><%= link_to 'Contact', pages_contact_path %></li>
# remove the above links from the application.html.erb since they are not necessary any longer
# replace the Brand with EtsyDemo
# replace the EtsyDemo link code to: 
<%= link_to "EtsyDemo", root_path, class: "navbar-brand" %>

########### end bootstrap navigation bar ##########


# create a partial for the footer app/views/layouts/_footer.html.erb
# place the code for the footer inside _footer.html.erb
# render the footer partial inside application.html.erb
<%= render 'layouts/footer' %>

########## customize the look of the forms and links #############

# navigate to www.getbootstrap/css/#forms for documentation
# in views/listings/_form.html.erb add the class "form-control" to every <input>, <textarea>, and <select> elements
<%= f.text_field :name, class: "form-control" %>
# wrap each element group label + control in a div with the class 'form-group'
<div class="form-group"> .... </div>
# navigate to www.getbootstrap/css/#buttons
# add the styling to the submit button
<%= f.submit class: 'btn btn-primary' %>
# apply styling to the show and back links in edit.html.erb file
<%= link_to 'Show', @listing, class: 'btn btn-link' %> |
<%= link_to 'Back', listings_path, class: 'btn btn-link' %>
# inside application.html.erb wrap the contents inside a container class
<div class="container">
   <%= yield %>
   <%= render 'layouts/footer' %>
 </div>
# inside views/listings/index.html.erb add class: 'btn btn-link' to the links Show, Edit, Destroy, and New Listing
<td><%= link_to 'Show', listing, class: 'btn btn-link' %></td>
# inside views/listings/show.html.erb add class: 'btn btn-link' to the links Edit and Back
# inside views/listings/new.html.erb add class: 'btn btn-link' to the link Back

############# end customization of look ######################



############# paperclip gem ###################

# navigate to https://github.com/thoughtbot/paperclip
# add a new line inside Gemfile
gem "paperclip", "~> 4.3"
# run bundle install
# restart the server: ctrl + c, rails s
# make sure that imagemagick is installed by typing:
-> convert 
# if it displays a list of operators, it means that it's working
# if not, install it from http://imagemagick.org/script/binary-releases.php
## Set up paperclip
-> rails generate paperclip listing image  # generate a migration to add image field to the listings table
-> rake db:migrate
-> ctrl + c
-> rails server
# prepare a blank image to serve as a placeholder for the missing images: e.g. default.jpg
# place it in app/assets/images
# place the following code inside the app/models/listing.rb
has_attached_file :image, styles: { medium: "200x>", thumb: "100x100>" }, default_url: "default.jpg" # 200x means fixed width and proport. height
validates_attachment_content_type :image, content_type: /\Aimage\/.*\Z/
# inside app/controllers/listings_controller.rb edit the method listing_params by adding :image to the permited params
def listing_params
  params.require(:listing).permit(:name, :description, :price, :image)
end
# inside the form partial app/views/listings/_form.html.erb add html: { multipart: true } to the form declaration:
<%= form_for(@listing, html: { multipart: true }) do |f| %>
# in the same partial, add one more form group just above the submit button
<div class="form-group">
  <%= f.label :image %><br>
  <%= f.file_field :image, class: 'form-control' %>
</div>
# inside the file app/views/listings/show.html.erb add the code to display the image
<%= image_tag @listing.image.url(:medium) %>
# update the homepage app/views/listings/index.html.erb to display the product image thumbnails
# add a new column to the table:
<th>Image</th>
.....
<td><%= image_tag listing.image.url(:medium) %></td>

############## end paperclip gem ###############


######## customize index page #############

# wrap the elements of app/views/listings/index.html.erb inside class="row" and class="col-md-3"
<div class="row">
  <% @listings.each do |listing| %>
    <div class="col-md-3">
      <%= image_tag listing.image.url(:medium) %><br>
      <%= listing.name %><br>
      ...
      ...
      <%= link_to 'Destroy', listing, method: :delete, data: { confirm: 'Are you sure?' }, class: 'btn btn-link' %>
    </div>
  <% end %>
</div>
# navigate to http://getbootstrap.com/components/#thumbnails, copy the code with the thumbnail class and apply it to the homepage:
<div class="row">
  <% @listings.each do |listing| %>
    <div class="col-md-3">
      <div class="thumbnail">
        <%= image_tag listing.image.url %>
        <div class="caption">
          <h3><%= listing.name %></h3>
          <p><%= listing.price %></p>
          <%= link_to 'Show', listing, class: 'btn btn-link' %>
          <%= link_to 'Edit', edit_listing_path(listing), class: 'btn btn-link' %>
          <%= link_to 'Destroy', listing, method: :delete, data: { confirm: 'Are you sure?' }, class: 'btn btn-link' %>
        </div>
      </div>
    </div>
  <% end %>
</div>

########## end customize index page ############


########## customize show page ##############

# create 2 columns with .col-md-6 each
# place the image inside .thumbnail
# use the function number_to_currency
<div class="row">
  <div class="col-md-6">
    <div class="thumbnail">
      <%= image_tag @listing.image.url %>
    </div>
  </div>
  <div class="col-md-6">
    <h3><%= @listing.name %></h3>
    <p><%= number_to_currency(@listing.price) %></p>
    <p><%= @listing.description %></p>
  </div>
</div>

<% if current_user == @listing.user %>
  <%= link_to 'Edit', edit_listing_path(@listing), class: 'btn btn-link' %> |
<% end %>
<%= link_to 'Back', listings_path, class: 'btn btn-link' %>

########## end customize show page ############


# delete the file app/assets/stylesheets/scaffolds.scss since custom.css.scss will be used for custom styling
# add ColorZilla extension to Google Chrome
# add CSSViewer extension to Google Chrome
# add the below css code to place the 5th, 9th, 13th, etc. image in the beginning of the row (on the left)
.col-md-3:nth-child(4n+1) {
  clear: left;
}

############### SSH Key #####################

# check if there is any previously created ssh key
-> cd ~/.ssh
-> ls
# if among the listed files you can see either id_rsa.pub or id_rsa.dsa.pub, it means that the ssh key has already been created
# to generate a ssh key, the following command shall be used:
-> ssh-keygen -t rsa -C 'leo.burdianov@gmail.com'
# after running this command, follow the instructions (among them remember the password which will be required for authentication below)
# add the new SSH key to the ssh-agent
-> eval "$(ssh-agent -s)" # ensure ssh-agent is enabled
-> ssh-add ~/.ssh/id_rsa # add the SSH key to the ssh-agent

# Download and installs xclip.
-> sudo apt-get install xclip

# Copy the contents of the id_rsa.pub file to the clipboard
$ xclip -sel clip < ~/.ssh/id_rsa.pub


# aftewards, navigate to Github and paste it wherever required
# after taking the necessary steps on Github, run the following command to authenticate the local computer to Github site:
-> ssh -T git@github.com

# initialize the repository
-> git init
-> git remote add origin git@github.com:burdianov/etsydemo-leo.git
-> git add .
-> git commit -m '....'
-> git push -u origin master

############ end SSH Key ################


########## heroku ############

# after setting up the account:
-> heroku login # then enter email and password as prompted
# to avoid the prompt of email and password every time, type the following:
-> heroku keys:add
## inside Gemfile
# add the code for the production environment
group :production do
  gem 'pg'
  gem 'rails_12factor'
end
# shift the line gem 'sqlite3' from the existing location to the group :development, :test do block
# add ruby version after source 'https://rubygems.org'
ruby '2.1.5'
# run bundle install and restart the server
-> bundle install --without production
# create a new repository on heroku
-> heroku create etsydemo-leo # if no name is specified, the heroku rename must be used
# after pushing to github, push the code to production
-> git push heroku master
# migrate the db on heroku
-> heroku run rake db:migrate
# to open the application from the command line, type:
-> heroku open

########## end heroku ###################


########## paperclip-dropbox ##########

# navigate to https://github.com/janko-m/paperclip-dropbox
# add the paperclip-dropbox gem to the Gemfile after paperclip
gem "paperclip-dropbox", ">= 1.1.7"
# run bundle install and restart the server
# open the file app/models/listing.rb
# inside the Listing Model, update has_attached_file as follows:
has_attached_file :image, styles: { medium: "200x>", thumb: "100x100>" }, default_url: "default.jpg",
    :storage => :dropbox,
    :dropbox_credentials => Rails.root.join("config/dropbox.yml")
# create a new file config/dropbox.yml
# paste the following code inside dropbox.yml file, the values shall be filled as exlained below:

app_key: "4u7v6kohph1hxfw"
app_secret: "ygfvr63abq9a5fe"
access_token: "xud4z5mjo8r625gr"
access_token_secret: "64y6meioy4czks7"
user_id: "536367809"
access_type: "app_folder" # the other option is 'dropbox'


# create the dropbox account
# install the dropbox
-> cd ~ && wget -O - "https://www.dropbox.com/download?plat=lnx.x86_64" | tar xzf -
# run the following code to launch the dropbox interface and open (means create) Dropbox folder:
-> ~/.dropbox-dist/dropbox
# the path of the newly created dropbox folder is home/lilian/Dropbox
# navigate to https://www.dropbox.com/developers/apps/create
# choose Dropbox API; App folder - Access to a single folder created specifically for your app; then name the app then click create
# on the opened page, copy the following values and paste them above inside dropbox.yml:
# App key; App secret;

# to authorize dropbox, run the following command replacing the respective values as per dropbox.yml
-> rake dropbox:authorize APP_KEY=your_app_key APP_SECRET=your_app_secret ACCESS_TYPE=dropbox|app_folder
# copy the generated link and paste it in the browser
https://www.dropbox.com/1/oauth/authorize?oauth_token=P5NkSTiVemufr4Hq
# only after getting authorized online, click yes on the console prompt
# from the console, copy the following generated values and update the dropbox.yml file:
# access_token; access_token_secret; user_id

# after completing the above actions, rails won't be able to find the previously updated images, since it will look for them in dropbox, therefore, it will raise an error. In order to avoid this error, for the time being comment the line <%= image_tag listing.image.url %> inside index.html.erb in the following way: <%#= image_tag listing.image.url %>

# next, edit all the products by uploading the images again
# then, uncomment the above line: <%= image_tag listing.image.url %>

# so far so good, but before pushing the code to github, we need to protect our Dropbox account data inside dropbox.yml, for that we'll use a gem called figaro

# DROPBOX must be configured to store images for heroku only. In order to achieve that, modify the code of the Listing Model as follows:

  if Rails.env.development?
    has_attached_file :image, styles: { medium: "200x>", thumb: "100x100>" }, default_url: "default.jpg"
  else 
    has_attached_file :image, styles: { medium: "200x>", thumb: "100x100>" }, default_url: "default.jpg",
      :storage => :dropbox,
      :dropbox_credentials => Rails.root.join("config/dropbox.yml"),
      :path => ":style/:id_:filename"
  end

# also, update the .gitignore file by adding the follwing lines:
  # Ignore files uploaded on localhost
  /public/system

############## end paperclip-dropbox #################


################ figaro gem ##############

# navigate to https://github.com/laserlemon/figaro

# add to Gemfile, just below paperclip-dropbox
gem "figaro"
# run bundle install and restart the server
# install figaro:
-> bundle exec figaro install
# this command created a new file config/application.yml and added it to .gitignore
# copy the below values from dropbox.yml to application.yml
app_secret: "ygfvr63abq9a5fe"
access_token_secret: "64y6meioy4czks7"
# convert the keys to ALL CAPS
APP_SECRET: "ygfvr63abq9a5fe"
ACCESS_TOKEN_SECRET: "64y6meioy4czks7"

# inside dropbox.yml, replace 2 values as follows:
app_secret: <%= ENV["APP_SECRET"] %>
access_token_secret: <%= ENV["ACCESS_TOKEN_SECRET"] %>

# configure figaro for heroku
-> figaro heroku:set -e production

# now we can push the code to github

############# end figaro gem ###################

# navigate to etsydemo-leo.herokuapp.com
# we'll get an error message. in case of errors, we have to run in the console:
-> heroku logs
# reading the logs, we can find out that the error is related to the previously uploaded image, which can't be found right now since the new location of the application images is on dropbox
# to solve this issue, like before, inside index.html.erb temporarily comment the line <%= image_tag listing.image.url %>
# then commit again to github
# after pushing again to heroku, the site is running properly, however the images aren't displayed
# after editing the product by adding a new image, we can uncomment safely the above code and push again everything

# CONCLUSION: set up Dropbox before adding any image to the website in order to avoid double work


################# devise gem ####################

# navigate to https://github.com/plataformatec/devise
# add gem 'devise' to Gemfile then run bundle install and restart the server
# run the following command
-> rails generate devise:install
## after running this command, execute manually the listed instructions
## 1) open config/environments/development.rb and just before the end, paste the lines (1 comment + 1 code line):
  # Required for Devise gem.
  config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }

## open config/environments/production.rb and just before the end, paste the lines (1 comment + 1 code line):
  # Required for Devise gem. Remember to change localhost:3000 to actual application host
  config.action_mailer.default_url_options = { host: 'localhost', port: 3000 } 

## 2) root_url already defined
## 3) copy the following two lines and paste them in app/views/layouts/application.html.erb inside div.container before the yield statement:
  <p class="notice"><%= notice %></p>
  <p class="alert"><%= alert %></p>
## 4) not applicable for our version of Rails
## 5) copy and run the following command to generate the devise views:
-> rails g devise:views

# run the following commands:
-> rails generate devise User
-> rake db:migrate
# restart the server

############### end devise gem ######################


# navigate to localhost:3000/users/sign_up
# sign up with username admin@example.com and password administrator
# navigate to localhost:3000/users/edit
# change the username to test@example.com
# remove the line: <p id="notice"><%= notice %></p> from listings/index.html.erb

# add the following links inside .nav.navbar-nav
<ul class="nav navbar-nav navbar-right">
  <% if user_signed_in? %>
    <li><%= link_to 'Edit Profile', edit_user_registration_path %></li>
    <li><%= link_to 'Sign Out', destroy_user_session_path, method: :delete %></li>
  <% else %>
    <li><%= link_to 'Sign Up', new_user_registration_path %></li>
    <li><%= link_to 'Sign In', new_user_session_path %></li>
  <% end %>
</ul>

# apply styling to the devise forms using .form-group and .form-control (the routes can be looked up with rake routes), remove the unnecessary breaks, apply class: "btn btn-primary" and class: "btn btn-danger" to the submit button:
	# Sign in: app/views/devise/sessions/new.html.erb
	# Sign up: app/views/devise/registrations/new.html.erb
	# Edit Profile: app/views/devise/registrations/edit.html.erb
	# Forgot your password: app/views/devise/passwords/new.html.erb

## add styling to the alert messages:
# open file app/views/layouts/application.html.erb and replace the lines:
  <p class="notice"><%= notice %></p>
  <p class="alert"><%= alert %></p>
# with the following code:
	<% flash.each do |name, msg| %>
    <% if msg.is_a?(String) %>
      <div class="alert alert-<%= name == 'notice' ? "success" : "danger" %> alert-dismissable">
        <button type="button" class="close" data-dismiss="alert" area-hidden="true">&times;</button>
        <%= content_tag :div, msg, :id => "flash_#{name}" %>
      </div>
    <% end %>
  <% end %>

## format the error messages
# create a new file app/helpers/devise_helper.rb and paste the following code inside

module DeviseHelper
  def devise_error_messages!
    return '' if resource.errors.empty?

    messages = resource.errors.full_messages.map { |msg| content_tag(:li, msg) }.join
    sentence = I18n.t('errors.messages.not_saved', count: resource.errors.count,
      resource: resource.class.model_name.human.downcase)

    html = <<-HTML
    <div class="alert alert-danger alert-dismissable">
      <button type="button" class="close" data-dismiss="alert">
        <span aria-hidden="true">&times;</span>
        <span class="sr-only">Close</span>
      </button>
      <h4>#{sentence}</h4>
      #{messages}
    </div>
    HTML

    html.html_safe
  end
end

### add a user name field to users table in order to be able to login not only via email, but with username as well

# generate the migration to add the name to the users table (always use this pattern to add fields to the database):
$ rails generate migration add_name_to_users name:string
$ rake db:migrate
$ ctrl + c
$ rails s

## authorize the strong parameter name field to be accepted for the sign_up and account_update forms only (for sign_in the email address will be used):
# navigate to app/controllers/application_controller.rb and under protect_from_forgery with: :exception paste the following code:
  before_action :configure_permitted_parameters, if: :devise_controller?

  protected

  def configure_permitted_parameters
    devise_parameter_sanitizer.for(:sign_up) { |u| u.permit(:name, :email, :password, :password_confirmation, :current_password) }
    devise_parameter_sanitizer.for(:account_update) { |u| u.permit(:name, :email, :password, :password_confirmation, :current_password) }
  end

# navigate to app/views/devise/registrations/new.html.erb and above the email form field (remove the autofocus: true from the email field), add the following code:
  <div class="form-group">
    <%= f.label :name %>
    <%= f.text_field :name, autofocus: true, class: "form-control" %>
  </div>

# navigate to app/views/devise/registrations/edit.html.erb and again above the email form field (remove the autofocus: true from the email field), add the following code:
  <div class="form-group">
    <%= f.label :name %>
    <%= f.text_field :name, autofocus: true, class: "form-control" %>
  </div>
############

# after deploying to heroku, run the following command:
$ heroku run rake db:migrate

#### devise validations
# devise initialization (e.g. password_length, etc...) can be found in config/initializers/devise.rb
# to customize devise error messages, open config/locales/devise.en.yml
#####

## own validations go in models
# inside app/models/user.rb validate the name field presence (devise already set up the validations for email and passwords):
validates :name, presence: true

# inside app/models/listing.rb validate the following:
validates :name, :description, :price, presence: true
validates :price, numericality: { greater_than: 0 }
validates_attachment_presence :image
### 

## inside app/views/listings/_form.html.erb customize the error messages:
  <% if @listing.errors.any? %>
    <div id="error_explanation" class="alert alert-danger alert-dismissable">
      <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
      <h4><%= pluralize(@listing.errors.count, "error") %> prohibited this listing from being saved:</h4>

      <ul>
      <% @listing.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>
##

## access data via console:
$ rails console
# delete all users
$ User.delete_all
# quit the console
$ exit
# run console on heroku
$ heroku run rails console
####

## link the listings to the users, so that every listing belongs to an user
$ rails generate migration add_user_id_to_listings user_id:integer
$ rake db:migrate
$ ctrl + c
$ rails s

## Inside Listing model add the association with the user:
$ belongs_to :user
## Inside User model add the association with the listings; dependent: :destroy means that if a user is deleted, the corresponding listings will be destroyed as well:
$ has_many :listings, dependent: :destroy


## Inside Listing controller create action, after the line @listing = Listing.new(listing_params) add the line:
@listing.user_id = current_user.id

## Inside app/views/listings/index.html.erb, under the line <p><%= number_to_currency(listing.price) %></p> add:
<p><%= "Sold by #{listing.user.name}" if listing.user %></p>

## Inside app/controllers/listings_controller.rb authenticate the user to have access to specific actions only:
before_filter :authenticate_user!, only: [:new, :create, :edit, :update, :destroy]
# inside the same file, insert the code for the signed in user to be able to edit and destroy his own listings only:
before_filter :check_user, only: [:edit, :update, :destroy]
# and declare the method below:
    def check_user
      if current_user != @listing.user
        redirect_to root_url, alert: "Sorry, this listing belongs to someone else"
      end
    end

# only the person who created the listing should be allowed to edit and destroy it, therefore open app/views/index.html.erb and update the code for Edit and Destroy links:
    <% if (user_signed_in?) && (current_user == listing.user) %>
      <%= link_to 'Edit', edit_listing_path(listing), class: 'btn btn-link' %>
      <%= link_to 'Destroy', listing, method: :delete, data: { confirm: 'Are you sure?' }, class: 'btn btn-link' %>
    <% end %>
....
<% if user_signed_in? %>
  <%= link_to 'New Listing', new_listing_path, class: 'btn btn-link' %>
<% end %>


# inside app/views.index.html.erb transform the images into links
# update the image_tag and edit the Edit links since the picture is clickable:
<%= link_to image_tag(listing.image.url), listing %>
# remove the line:
  <%= link_to 'Show', listing, class: 'btn btn-link' %>


# inside app/views/show.html.erb show the edit link only to the listing owner:
<% if current_user == @listing.user %>
  <%= link_to 'Edit', edit_listing_path(@listing), class: 'btn btn-link' %> |
<% end %>
# inside app/views/show.html.erb, remove the line which duplicates the application.html.erb alert message:
<p id="notice"><%= notice %></p>

# inside config/routes.rb include a new line:
get 'seller' => 'listings#seller'

# inside listings_controller.rb add the seller action and update the before_filter call by adding :seller to the permissions:
  before_filter :authenticate_user!, only: [:seller, :new, :create, :edit, :update, :destroy]
  def seller
    @listings = Listing.where(user: current_user).order('created_at DESC')
  end

# inside _header.html.erb partial, after <% if user_signed_in? %>, add the link to the seller page:
<li><%= link_to 'Manage Listings', seller_path %></li>
# create view/listings/seller.html.erb view, copy the code from the index.html.erb and place it in seller.html.erb.

# from listings/index.html.erb remove the following code:
    <% if (user_signed_in?) && (current_user == listing.user) %>
      <%= link_to 'Edit', edit_listing_path(listing), class: 'btn btn-link' %>
      <%= link_to 'Destroy', listing, method: :delete, data: { confirm: 'Are you sure?' }, class: 'btn btn-link' %>
    <% end %>

### redesign the seller page by replacing the existing code with the following:
<table class="table table-striped table-bordered">
  <tr>
    <th class="center">Image</th>
    <th class="center">Name</th>
    <th class="center">Description</th>
    <th class="center">Price</th>
    <th class="center">Action</th>
  </tr>
  <% @listings.each do |listing| %>
    <tr>
      <td><%= image_tag listing.image.url(:thumb) %></td>
      <td><%= listing.name %></td>
      <td><%= listing.description %></td>
      <td><%= number_to_currency(listing.price) %></td>
      <td>
        <div class="btn-group">
          <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            Action <span class="caret"></span>
          </button>
          <ul class="dropdown-menu">
            <li><%= link_to 'View', listing, class: 'btn btn-link' %></li>
            <li><%= link_to 'Edit', edit_listing_path(listing), class: 'btn btn-link' %></li>
            <li><%= link_to 'Destroy', listing, method: :delete, data: { confirm: 'Are you user?' }, class: 'btn btn-link' %></li>
          </ul>
        </div>
      </td>
    </tr>
  <% end %>
</table>

<br>

<% if user_signed_in? %>
  <%= link_to 'New Listing', new_listing_path, class: 'btn btn-link' %>
<% end %>
###

### add a banner to listings/index.html.erb
# add the jumbotron above the existing code:
<div class="jumbotron">
  <h1>Handcrafted items from <br> around the world.</h1>
  <h2>Discover one-of-a-kind items</h2>
</div>
# place the banner.jpg image inside app/assets/images folder.
# add the background image by updating the custom.css.scss:
.jumbotron {
  background-image: url('https://dl.dropboxusercontent.com/s/k777t3kblqshw9d/banner.jpg?dl=0');
  h1, h2 {
    font-family: guardian-egyptt, georgia, serif;
  }
}
# upload the banner.jpg to dropbox and update the above code as follows:
background-image: url('https://www.dropbox.com/s/k777t3kblqshw9d/banner.jpg?dl=0');

## create Order scaffold
# inside Order model: validates :address, :city, :state
# inside Order model: belongs_to :listing
# inside Listing model: has_many :orders
# add listing_id to orders table:
-> rails generate migration add_listing_id_to_orders listing_id:integer
# inside Order model add:
belongs_to :buyer, class_name: 'User'
belongs_to :seller, class_name: 'User' 
# inside User model add:
has_many :sales, class_name: 'Order', foreign_key: 'seller_id'
has_many :purchases, class_name: 'Order', foreign_key: 'buyer_id'
# add buyer_id and seller_id fields to orders table:
rails generate migration add_fields_to_order buyer_id:integer seller_id:integer

# inside orders_controller.rb create action, under the line @order = Order.new(order_params) add the following code:
    @listing = Listing.find(params[:listing_id])
    @seller = @listing.user
    @order.listing_id = @listing.id
    @order.buyer_id = current_user.id
    @order.seller_id = @seller.id

# inside orders_controller.rb new action, before end add the following line:
@listing = Listing.find(params[:listing_id])

# inside orders_controller.rb create action replace the line: format.html { redirect_to @order, notice: 'Order was successfully created.' } with
format.html { redirect_to root_url, notice: 'Order was successfully created.' }

# on top fo orders_controller.rb add:
before_action :authenticate_user!

# inside routes.rb rearange the listings and orders as follows:
  resources :listings do 
    resources :orders
  end

# inside views/orders/new.html.erb update to path of the Back link:
<%= link_to 'Back', listing_orders_path %>

# inside views/orders/_form.html.erb update the form declaration:
<%= form_for([@listing, @order]) do |f| %>

# inside views/listings/show.html.erb, under <p><%= @listing.description %></p> add:
    <br>
    <div class="center">
      <%= link_to 'Buy It Now', new_listing_order_path(@listing), class: 'btn btn-primary' %>
    </div>

# apply usual style to views/orders/_form.html.erb


############# stripe ###########

# Docs: www.stripe.com/docs/api
# Github: https://github.com/stripe/stripe-ruby
# Gemfile: gem 'stripe'
# Navigate to https://stripe.com/ for Sign Up
# after sign up, got to Your Account -> Account Settings -> API Keys
# user the Test Keys for testing, the when the site is open to the public, swap the keys with the Live ones.
# Copy the Secret Key and Publishable Key and paste them in the config/application.yml as part of the new 2 lines as follows:
STRIPE_API_KEY: "sk_test_HBb2RpKX6ZYXHmYwwRWXeVTp"
STRIPE_PUBLIC_KEY: "pk_test_6S54ijxXVgoe80qXs3l9jJgR"
# inside app/views/layouts/application.html.erb, just before <%= csrf_meta_tags %> add the following line:
<%= javascript_include_tag 'https://js.stripe.com/v2/' %>
# in the same file, after <%= csrf_meta_tags %> add the following line:
<%= tag :meta, :name => 'stripe-key', :content => ENV["STRIPE_PUBLIC_KEY"] %>  
# restart the server to load the environment variables

############### end stripe ######################

# inside views/orders/_form.html.erb, just before f.submit form-group, add the following code:
  <div class="form-group">
    <div class="row">
      <div class="col-md-8">
        <%= label_tag :card_number, 'Credit Card Number' %>
        <%= text_field_tag :card_number, nil, { :name => nil, :'data-stripe' => "number", class: "form-control"} %>
      </div>
      <div class="col-md-4">
        <%= label_tag :card_code, 'CVC' %>
        <%= text_field_tag :card_code, nil, { :name => nil, :'data-stripe' => "cvc", class: "form-control"} %>
      </div>
    </div>
  </div>
  <div class="form-group">
    <%= label_tag nil, "Expiration Date" %>
    <div class="row">
      <div class="col-md-3">
        <%= select_month nil, { user_to_digit_numbers: true }, { :name => nil, :'data-stripe' => "exp-month", class: "form-control"} %>
      </div>
      <div class="col-md-3">
        <%= select_year nil, { start_year: Date.today.year, end_year: Date.today.year + 10 }, { :name => nil, :'data-stripe' => "exp-year", class: "form-control"} %>
      </div>
    </div>
  </div>

# inside views/orders/_form.html.erb, above all code, paste the following:
<div class="row">
  <div class="col-md-4">
    <div class="thumbnail">
      <%= image_tag @listing.image.url %>
    </div>
    <h3><%= @listing.name %></h3>
    <h4><%= number_to_currency(@listing.price) %></h4>
  </div>
  <div class="col-md-8">
# then at the bottom, close 2 divs


